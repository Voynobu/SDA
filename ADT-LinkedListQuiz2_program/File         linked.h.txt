/* File        : linked.h */
/* Deskripsi   : ADT linked list dengan representasi fisik pointer */
/*		 Representasi address dengan pointer */
/*		 InfoType adalah integer */
/* Dibuat oleh : Ade Chandra Nugraha */

#ifndef linked_H
#define linked_H
#include <stdio.h>
#include <malloc.h>


typedef int infotype;
typedef struct tElmtList *address;
typedef struct tElmtList {
	infotype info;
	address  next;
 } ElmtList;

int isEmpty(address p){
// Tujuan : memeriksa apakah linked masih kosong
// Linked list kosong , jika Head == NULL
	if (p == NULL) {
			return 1;
	} else {
			return 0;
	}
}

void Create_Node (address *p){
// Tujuan : memesan memory dengan alokasi dinamis
// Jika berhasil mengirimkan address, dan jika gagal mengirimkan NULL
// Parameter : P (parameter Output)
	*p = (address)malloc(sizeof(ElmtList));
}

void Isi_Node (address *p , infotype nilai){
// Tujuan : Mengisi node yang sudah dipesan dengan Nilai yang dikirimkan
// Periksa keberadaan P, Nilai diisi jika P tidak NULL
//				*p.next diisi NULL
// Parameter : P (parameter Input-Output); Nilai (parameter Input)
if(*p != NULL){
		(*p)->info = nilai;
		(*p)->next = NULL;
} else {
		printf ("Node tidak dapat di isi");
}
}

void Tampil_List (address p){
// Tujuan : Menampilkan seluruh isi Linked List
// Parameter : p (parameter input)
if(p == NULL){
		printf("Linked list kosong");
}

while((p)->next != NULL){
		printf("%d ->", (p)->info);
		p = (p)->next;
}

printf("NULL");
}

void Ins_Awal (address *p, address PNew){
// Tujuan : Insert 1 node baru (PNew) di awal Linked List
// Parameter : P (input-output)
//             PNew (input)
if (PNew == NULL){
		printf("PNew is NULL");
}

(PNew)->next == *p;
*p = PNew;
}

void Ins_Akhir (address *p, address PNew){
/* Tujuan : menambahkan elemen list (PNew) di akhir LinkedList */
/* IS : p mungkin Kosong */
/* FS : menyambungkan elemen baru (PNew) di akhir Linked List */
	if (*p = NULL){
		*p = PNew;
	}

	address *Last = *p;
	while ((*Last)->next != NULL){
		Last = (*Last)->next;
	}

	(*Last)->next == PNew;	
}

address Search (address p, infotype nilai){
/* Mencari apakah ada elemen list dengan Info(P) = nilai */
/* Jika ada, mengirimkan address elemen tsb. */
/* Jika tidak ada, mengirimkan Nil */
/* Menggunakan variabel bertype boolean */
	address *curr = p;
	int Position = 0;

	while(*curr != NULL){
		if((*curr)->info == nilai){
			return Position;
		}
		*curr = (*curr)->next;
		Position++;
	}
	printf("Nil");
}

void InsertAfter (address * pBef, address PNew){
/* Tujuan : Menyambungkan 1 Node baru(PNew) stlah node tertentu(PBef) */
/* IS : pBef sudah dialokasi */
/* FS : Insert PNew sebagai elemen sesudah PBef */
/* Asumsi : pBef adalah posisi insert */
if (PNew != NULL && *pBef != NULL){
		(PNew)->next = (*pBef)->next;
		(*pBef)->next == PNew;
	} else {
		printf ("Node Invalid");
	}
}

void Del_Awal (address * p, infotype * X){
/* IS : P TIDAK Kosong */
/* FS : Elemen pertama List dihapus, nilai info disimpan ke X */
/* 	dan alamat elemen pertama di dealokasi */
if(*p == NULL){
		return "Tidak ada yang dapat dihapus";
}

	*X = *p;
	*p = (*p)->next;
	free(*X);
}

void Del_Akhir (address * p, infotype * X){
/* IS : P TIDAK Kosong */
/* FS : Elemen terakhir list dihapus : nilai info disimpan pada X */
/* 	dan alamat elemen terakhir di dealokasi */
address *Prev = NULL;
address *curr = *p;
		
while(*curr != NULL){
*Prev = *curr;
*curr = (*curr)->info;
	}
	*X = (*curr)->info
	(*Prev)->next == NULL;
	free(*curr);
}

void Del_After (address * pBef, infotype * X){
/* IS : pBef TIDAK Kosong (hasil search posisi node sebelum yang didel)*/
/* FS : menghapus Node setelah pBef */
/*      nilai info node yang dihapus disimpan pada X */
/* 	  dan alamat elemen setelah pBef di dealokasi */
	(*pBef)->next == (*X)->next;
	free(*X);
}

void DeAlokasi (address * p){
/* IS : P terdefinisi */
/* FS : P dikembalikan ke sistem */
/* Melakukan dealokasi / pengembalian address P ke system */
	if(*p == NULL){
		return "P sudah NULL";
	}
	
	free(*p);
	*p = NULL;
}

int NbElmt (address p){
/* Mengirimkan banyaknya elemen list, mengirimkan 0 jika list kosong */
// Recursif Mode
	address *curr = p;
	int Jumlah = 0;

	if (p == NULL){
		return 0;
	}

	while (*curr != NULL){
		Jumlah++;
		*curr == (*curr)->next;
	}
	
	return Jumlah;
}

infotype Min (address p){
/* Mengirimkan nilai Info(P) yang minimum */
	address *curr = p;
	int Min = (*curr)->info;

	while(*curr != NULL){
		*curr == (*curr)->next;
	if ((*curr)->info < Min){
			Min = (*curr)->info;
		}
	}

	return Min;
}

infotype Rerata (address p){
/* Mengirimkan nilai rata-rata Info(P) */
	address *curr = p;
	int Total = 0;
	int JumlahNode = 0;
	int Rerata;

	while (*curr != NULL){
		Total += (*curr)->info;
		JumlahNode++;
		*curr = (*curr)->next;
	}

	Rerata = Total / JumlahNode;
	return Rerata;
}

address BalikList (address p);
/* IS : p sembarang */
/* FS : Elemen List dibalik : elemen terakhir menjadi elemen pertama, dst */
address BalikList(address p) {
    address *prev = NULL;    
    address *current = p;   
    address *next = NULL;

    while (current != NULL) {
        *next = (*current)->next; 
        (*current)->next = *prev; 
        *prev = *current;       
        *current = *next;       
    }

    return *prev;
}


#endif
